pipeline {
    agent any
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }

    environment {
        JENKINS_HOME="$JENKINS_HOME"
        BUILD="/var/jenkins_home/workspace/mlops"
    }

    stages {
        stage('Preparation') {
            steps {
            cleanWs()
            checkout scm
            }
        }

        stage('Checkout') {
            steps {
                git 'https://github.com/nocsland/other-projects.git'
                sh 'ls -al "$BUILD/translator"'
            }
        }

        stage('Remove old Docker'){
            steps{
                sh 'for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do apt-get remove $pkg||true; done'
            }
        }
        stage('Install Docker') {
                steps {
                    sh 'sudo rm /usr/share/keyrings/docker-archive-keyring.gpg'
                    sh '''
                        apt update && apt install -y --no-install-recommends \
                        apt-transport-https \
                        ca-certificates \
                        curl \
                        gnupg \
                        lsb-release
                        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --batch --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
                        apt update && apt install -y --no-install-recommends docker-ce docker-ce-cli containerd.io
                        rm -rf /var/lib/apt/lists/*
                    '''
    }
}


        stage('Build Docker image') {
            steps {
                script {
                    dir('translator/') {
                        sh 'docker build -t translator-container .'
                    }
                }
            }
        }
    }
}
